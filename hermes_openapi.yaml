openapi: 3.0.3

info:
  title: Hermes - the identity verification API
  x-logo:
    url: "https://www.ubble.ai/wp-content/uploads/2021/08/Combo_Ubble_Logo_Exe_RVB-1-1-e1627891718121.png"
  description: |
    # Introduction
    Welcome to Ubble's API documentation !

    This API enables you to build a seamless identity verification experience for your customers.

    # Get Started
    This section describes the easiest way to integrate our API. At the end of this section you will be able to create and get the results of an identity verification.

    ![](https://raw.githubusercontent.com/kenji-ubble/kenji-ubble/main/doc_diagram.png)

    ## Before you start
    ### Get your credentials
    We use both mutual TLS and basic authentication. You must then authenticate your calls by including your secret credentials as well as your client certificate and key in API requests.

    Make sure you have an account with us. Once you've signed in, navigate on your dashboard to `Security > Credentials` and create your credentials and certificates.

    Your credentials and certificates carry many privileges, so be sure to keep them secure. Do not share your secret API keys or API certificates in publicly accessible areas such as GitHub, client-side code, and so forth.

    ### Prepare a webhook and a redirect URL
    You will need to define a webhook when generating an identity verification. It will enable you to be notified of each event and to make decisions.

    For security reasons all our webhook calls are signed, can be whitelisted or can even request an authentication. You will find all details about webhook implementation in the webhook section.

    Finally you will need to provide a redirect URL. This URL will be used to redirect the applicant at the end of the verification.
    This section describes the easiest way to integrate our API. At the end of this section you will be able to create and get the results of an identity verification.

    ## Step 1: Request an identity verification

    The first step is to request an identity verification.

    You will have to include the declared first name and last name of the applicant in your call, as well as the `webhook_url` and `redirect_url` you should have prepared before. All the details to create an identity verification can be found in the [endpoint section](#tag/identity-verifications/operation/create_identity_verification).

    The call will return an identity verification object and the unique identifier of the identity verification. We strongly advise you to store it in your backend because you will need it to get the detailed results.

    ## Step 2: Redirect the applicant

    The identity verification object also includes the `verification_url` in the links attribute. This url will be used to redirect applicants to our web application.

    At this step, we strongly advise you to use web redirection. We've built an integration example showcasing how to integrate Ubble in a web app: [ubble-express-integration](https://github.com/ubbleai/integration_examples/tree/master/web).

    All the details to use another integration can be found in the [integration section](#section/Integration).

    ## Step 3: Manage the applicant return

    When applicants terminate the verification, they are redirected to the `redirect_url` you have defined when creating the identity verification.

    The verification process can be synchronous or asynchronous, and so the results may not be available when the applicant is redirected. At this step, we advise you to create a waiting page.

    All the details to manage the applicant return can be found in the [integration section](#section/Integration).

    ## Step 4: Make your decision

    Thanks to the webhook you have defined you will be notified of each event regarding the identity verification. An event is a change in the verification lifecycle. You will find the list of events in the event section.

    The webhook body will include the event type as well as the `status` of the identity verification. At this step, you should wait for the `status` to be one of `approved`, `declined` or `retry_required`.

    If the `status` is `approved`, you should accept the applicant request.

    If the `status` is `declined`, you should refuse it.

    If the `status` is `retry-required`, you should request a retry using the [retry endpoint](#tag/identity-verifications/operation/retry_identity_verification) and redirect the applicant on the new `verification_url` you will get.

    For more details see the [identity verification results section](#section/Identity-verification-results).

    ## Step 5: Get the detailed results

    You may have to get the detailed results, particularly when the verification is `approved`.

    All the details to retrieve an identity verification can be found in the [endpoint section](#tag/identity-verifications/operation/retrieve_identity_verification). You will only need the unique identifier you got when creating the identity verification.

    # Integration
    As mentioned in the [get started section](#section/Get-Started), applicants should be redirected toward our web application to perform the verification. In this section you will find all the information you need to make this redirection as seamless as possible.

    <div style="padding: 0px 0px 14px 14px ; background-color: #fff6d9; border-color: #f8c92e; color: #666; display: flex; align-items: center;">
      <div style="margin-right: 20px; margin-top: 14px; font-size: 24px; color: #f8c92e; vertical-align: center;">⚠️</div>
      <div style="display: table-cell; vertical-align: center;">
        <p>Please note the default expiration time is 15 minutes. In this case you will need to request a retry. See the <a href="#section/Identity-verification-results">identity verification results section</a> for more details.</p>
      </div>
    </div>

    ## Customization
    To properly integrate the identity verification, you should customize the user journey with your account manager. You will be able to define: colors, logo, font, button radius and introduction sentence as detailed here: Customise your Ubble Experience - Ubble .

    If you need it, you can create several user journey and provide the user_journey_id when creating an identity verification.

    ## Web redirection

    ### Integration
    You can redirect the applicant by using web redirection. We support the current versions of all the major browsers.

    We've built an integration example showcasing how to integrate Ubble in a web app:

    - [ubble-express-integration](https://github.com/ubbleai/integration_examples/tree/master/web)

    Web Redirection is compatible with the following browsers / OS. We do not ensure the compatibility of our service with beta versions of browsers / OS.

    | Desktop      | Chrome | Firefox | Safari | Internet Explorer | Edge | Opera |
    |--------------|--------|---------|--------|-------------------|------|-------|
    | Min. Version | ≥ 53   | ≥ 52    | ≥ 11.1 | -                 | ≥ 16 | ≥ 58  |

    | Android      | Chrome for Android | Firefox for Android | Samsung Internet | IE Mobile |
    |--------------|--------------------|---------------------|------------------|-----------|
    | Min. Version | ≥ 73               | ≥ 66                | ≥ 6.2            | -         |

    | iOS          | Safari Mobile | Chrome | All other browsers |
    |--------------|---------------|--------|--------------------|
    | Min. Version | ≥ 11.0        | ≥ 14.3 | -                  |

    To integrate Ubble in your website, create an identity verification in your backend, pass the URL to your web app and simply add it as a link:

    ```html
      <a href="`${identificationUrl}`"></a>
    ```

    ### Applicant return
    Applicants are redirected to the redirect URL you defined when they terminated the journey. This return is associated with an event that you will find both in the webhook notification and as a parameter in the redirect URL.

    Example of redirect URL: `?id=123&event=capture_abortion`

    This event can be: 

    - `capture_completion`: the applicant has completed the capture.

    In this case you will have to wait for the next event to make you decision. You can either ask applicants to perform additional checks, or make them wait until results are available.

    Please also note that in some cases the `check_completion` event can occur almost simultaneously, and consequently the results can be available when the applicant is redirected.

    - `capture_abortion`:  the applicant terminated the capture without completing it.

    In this case we advise you to request a retry. See the [retry section](#section/Identity-verification-results/Retry-management) to implement it.

    - `capture_refusal`: the applicant explicitly refused to perform the capture.

    In this case we advise you to propose an alternative to the applicant.

    For more details about events please see the [lifecycle section](#section/Identity-verification-results/Lifecycle).

    ## Webview
    For a more integrated user experience in your mobile application, you can redirect the applicant using a webview.

    ### iOS
    You will find here an integration example:

    - [iOS >= 13](https://github.com/ubbleai/integration_examples/tree/master/ios), on **iOS >= 14.3** WebRTC features work perfectly inside the [WKWebView](https://developer.apple.com/documentation/webkit/wkwebview).

    On iOS <= 12, due to limited webview compatibility, Ubble verification process must be completed in Safari App.

    For iOS Native you will have to open safari using the open method:
    ```swift
    UIApplication.shared.open(identificationUrl, options: [:])
    ```

    ### Android
    You will find here an integration example:
    - [android - webview version >= 53](https://github.com/ubbleai/integration_examples/tree/master/android)

    ### React-native
    You will find here an integration example:
    - [react-native - react-native webview >= 8.0](https://github.com/ubbleai/integration_examples/tree/master/UbbleReactNative)

    ### Flutter

    If you wish to use Ubble with Flutter, you can use the [flutter_inappwebview](https://inappwebview.dev/docs/).

    Make sure to follow the [WebRTC API](https://inappwebview.dev/docs/webrtc-api/) section of the documentation to ensure we're able to launch a video stream.

    ### Applicant return
    Applicants are redirected to the redirect URL you defined when they terminated the journey. In webview integration, we are expecting a deeplink to redirect the applicant on your mobile application. 

    The return is associated with an event that you will find both in the webhook notification and as a parameter in the redirect URL. 

    Example of redirect URL: `?id=123&event=capture_abortion`

    This event can be: 
    - `capture_completion`: the applicant has completed the capture. 

    In this case you will have to wait for the next event to make you decision. You can either ask applicants to perform additional checks, or make them wait until results are available. 

    Please also note that in some cases the check_completion event can occur almost simultaneously, and consequently the results can be available when the applicant is redirected. 

    - `capture_abortion`:  the applicant terminated the capture without completing it. 

    In this case we advise you to request a retry. See the [retry section](#section/Identity-verification-results/Retry-management) to implement it. 

    - `capture_refusal`: the applicant explicitly refused to perform the capture. 

    In this case we advise you to propose an alternative to the applicant. 

    ## Iframe integration
    <div style="padding: 0px 0px 14px 14px ; background-color: #fff6d9; border-color: #f8c92e; color: #666; display: flex; align-items: center;">
      <div style="margin-right: 20px; margin-top: 14px; font-size: 24px; color: #f8c92e; vertical-align: center;">⚠️</div>
      <div style="display: table-cell; vertical-align: center;">
        <p>Work in progress.</p>
      </div>
    </div>

    ## Mobile redirection
    Both for security reasons and because it improves the conversion rate, we redirect all applicants from desktop to mobile. Nevertheless we ensure a synchronisation between desktop and mobile to redirect applicants to their desktop at the end of the journey.

    Applicants can use either QR code or SMS sending to perform this redirection. To make the SMS redirection smoother, you can provide the phone number of the applicant when creating an identity verification: we use it to prefill the associated field during the redirection. Fore more details see the [identity verification endpoint](#tag/identity-verifications/operation/create_identity_verification).

    # Identity verification results

    ## Lifecycle

    To make your decision you should mainly use events and `status`. This information is directly available in the webhook body.

    ![](https://raw.githubusercontent.com/kenji-ubble/kenji-ubble/main/life%20cycle%20diagram.png)

    ## Events

    An event is a change in the verification lifecycle that triggers a notification.

    | Events             | Description                                                                                                                       |
    |--------------------|-----------------------------------------------------------------------------------------------------------------------------------|
    | creation           | You created an identity verification                                                                                              |
    | start              | The applicant has been redirected to the web application                                                                          |
    | capture_completion | The applicant completed the capture                                                                                               |
    | checks_completion  | We completed the checks                                                                                                           |
    | expiration         | The link expired without applicant being redirected to the web application, please note the default expiration time is 15 minutes |
    | capture_refused    | The applicant explicitly refused to perform the verification                                                                      |
    | capture_abortion   | The applicant terminated the capture without completing it                                                                        |
    | checks_inconclusive| The applicant did not provide the assets required to perform the checks                                                           |
    | retry_requested    | You requested a retry for this identity verification                                                                              |

    ## Status

    The `status` is defined by the position of the verification in the lifecycle and indicates the decision to make.

    | Status                | Description                                                                                                                                                   |
    |-----------------------|---------------------------------------------------------------------------------------------------------------------------------------------------------------|
    | `pending`             | The identity verification is available, <br>you should redirect the applicant to the web application using the verification URL.                              |
    | `capture_in_progress` | The applicant is performing the capture, <br>you should wait for status change.                                                                               |
    | `checks_in_progress`  | We are performing the checks, <br>you should wait for status change.                                                                                          |
    | `approved`            | All checks are valid, <br>you should accept to the applicant request.                                                                                         |
    | `declined`            | An irregularity has been detected when performing checks,<br>You should refuse the applicant request. <br>If needed you request a new identity verification.  |
    | `retry_required`      | We could not perform all the checks,<br>you should request a retry for this identity verification.                                                            |
    | `refused`             | The applicant refused to perform the verification, <br>you should propose an alternative.                                                                     |

    ## Reason codes

    When the `status` is `retry_required`, `declined` or `refused` you will also get additional information in the webhook body with the `reason_codes` attribute. It will include both a numeric code and a string, as detailed in the example below. 

    ```json
    "reason-codes": [
      {"code": 1310, "reason": "manipulation_face_blurry"},
      {"code": 2102, "reason": "document_not_accepted"},
    ]
    ```
    You will find below the exhaustive list of these codes. 

    <div style="padding: 0px 0px 14px 14px ; background-color: #fff6d9; border-color: #f8c92e; color: #666; display: flex; align-items: center;">
      <div style="margin-right: 20px; margin-top: 14px; font-size: 24px; color: #f8c92e; vertical-align: center;">⚠️</div>
      <div style="display: table-cell; vertical-align: center;">
        <p>Please note that we consider adding new reason codes as backward compatible.</p>
        <p>You should then build you business rules on status and use reason codes as additional information, rather than use reason codes as required information.</p>
      </div>
    </div>

    <style type="text/css">
    .tg  {border-collapse:collapse;border-color:#ccc;border-spacing:0}
    .tg td{background-color:#fff;border-color:#ccc;border-style:solid;border-width:1px;color:#333;
      font-family:Arial, sans-serif;font-size:14px;overflow:hidden;padding:10px 5px;word-break:normal;}
    .tg th{background-color:#f0f0f0;border-color:#ccc;border-style:solid;border-width:1px;color:#333;
      font-family:Arial, sans-serif;font-size:14px;font-weight:normal;overflow:hidden;padding:10px 5px;word-break:normal;}
    .tg .tg-dvid{background-color:#efefef;border-color:inherit;font-weight:bold;text-align:left;vertical-align:top}
    .tg .tg-fymr{background-color:#f0f0f0;border-color:inherit;font-weight:bold;text-align:left;vertical-align:top;}
    .tg .tg-y698{background-color:#c4c4c4;border-color:inherit;text-align:left;vertical-align:top}
    .tg .tg-0pky{border-color:inherit;text-align:left;vertical-align:top}
    .one {width: 5%}
    .two {width: 40%}
    .three {width: 0%}
    </style>

    ### Status: `refused`
    <table class="tg">
    <colgroup>
      <col class="one" />
      <col class="two" />
      <col class="three" />
    </colgroup>
    <thead>
      <tr>
        <th class="tg-fymr"><nobr><code>code</code></nobr></th>
        <th class="tg-fymr"><code>reason</code></th>
        <th class="tg-fymr">Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td class="tg-0pky">1001</td>
        <td class="tg-0pky">applicant_refusal</td>
        <td class="tg-0pky">applicant explicitly refused to do the verification process by clicking on the dedicated button</td>
      </tr>
    </tbody>
    </table>

    ### Status: `retry_required`
    <table class="tg">
    <colgroup>
      <col class="one" />
      <col class="two" />
      <col class="three" />
    </colgroup>
    <thead>
      <tr>
        <th class="tg-fymr"><nobr><code>code</code></nobr></th>
        <th class="tg-fymr"><code>reason</code></th>
        <th class="tg-fymr">Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td class="tg-fymr" colspan="3"><span style="font-weight:bold">Applicant engagement issue</span></td>
      </tr>
      <tr>
        <td class="tg-0pky">1101</td>
        <td class="tg-0pky">applicant_never_started</td>
        <td class="tg-0pky">applicant was probably not redirected to the application and never started the flow</td>
      </tr>
      <tr>
        <td class="tg-0pky">1111</td>
        <td class="tg-0pky">applicant_not_ready</td>
        <td class="tg-0pky">applicant explicitly stated that he/she wanted to perform the identity verification later by clicking on the dedicated button</td>
      </tr>
      <tr>
        <td class="tg-0pky">1112</td>
        <td class="tg-0pky">applicant_no_document</td>
        <td class="tg-0pky">applicant explicitly stated that he/she did not have their document with him by clicking on the dedicated button</td>
      </tr>
      <tr>
        <td class="tg-0pky">1113</td>
        <td class="tg-0pky">camera_access_refused</td>
        <td class="tg-0pky">applicant did not give access to the camera despite the dedicated instructions</td>
      </tr>
      <tr>
        <td class="tg-0pky">1121</td>
        <td class="tg-0pky">drop_before_capture</td>
        <td class="tg-0pky">applicant left the process before the capture phase and the verification URL expired (by default the expiration time is 15 minutes)</td>
      </tr>
      <tr>
        <td class="tg-0pky">1131</td>
        <td class="tg-0pky">drop_during_capture</td>
        <td class="tg-0pky">applicant left the process during the capture phase and the verification URL expired (by default the expiration time is 15 minutes)</td>
      </tr>
      <tr>
        <td class="tg-fymr" colspan="3"><span style="font-weight:bold">Technical issue</span></td>
      </tr>
      <tr>
        <td class="tg-0pky">1201</td>
        <td class="tg-0pky">connexion_insufficient</td>
        <td class="tg-0pky">applicant did not have a sufficient connexion to perform the capture</td>
      </tr>
      <tr>
        <td class="tg-0pky">1202</td>
        <td class="tg-0pky">browser_not_supported</td>
        <td class="tg-0pky">applicant’s browser was not suitable for video streaming</td>
      </tr>
      <tr>
        <td class="tg-0pky">1203</td>
        <td class="tg-0pky">camera_not_found</td>
        <td class="tg-0pky">applicant’s device did not have any camera</td>
      </tr>
      <tr>
        <td class="tg-fymr" colspan="3"><span style="font-weight:bold">Document capture issue</span></td>
      </tr>
      <tr>
        <td class="tg-0pky">1301</td>
        <td class="tg-0pky">document_video_blurry</td>
        <td class="tg-0pky">applicant’s document video is too blurry<br>(mostly due to too much movement but if this error persists the camera quality might be at fault)</td>
      </tr>
      <tr>
        <td class="tg-0pky">1302</td>
        <td class="tg-0pky">document_video_lighting_issue</td>
        <td class="tg-0pky">applicant performed the document capture under poor lighting conditions</td>
      </tr>
      <tr>
        <td class="tg-0pky">1310</td>
        <td class="tg-0pky">manipulation_face_blurry</td>
        <td class="tg-0pky">applicant has not captured the front of the document</td>
      </tr>
      <tr>
        <td class="tg-0pky">1311</td>
        <td class="tg-0pky">document_back_not_captured</td>
        <td class="tg-0pky">applicant has not captured the back of the document</td>
      </tr>
      <tr>
        <td class="tg-0pky">1312</td>
        <td class="tg-0pky">document_partially_hidden</td>
        <td class="tg-0pky">applicant hides part of the document</td>
      </tr>
      <tr>
        <td class="tg-0pky">1313</td>
        <td class="tg-0pky">document_not_tilted</td>
        <td class="tg-0pky">applicant did not present a dynamic view of the document</td>
      </tr>
      <tr>
        <td class="tg-0pky">1314</td>
        <td class="tg-0pky">document_instructions_not_followed</td>
        <td class="tg-0pky">applicant did not follow the instructions when submitting their document</td>
      </tr>
      <tr>
        <td class="tg-fymr" colspan="3"><span style="font-weight:bold">Face capture issue</span></td>
      </tr>
      <tr>
        <td class="tg-0pky">1401</td>
        <td class="tg-0pky">face_video_blurry</td>
        <td class="tg-0pky">applicant’s video of their face is too blurry <br>(mostly due to too much movement but if this error persists the camera quality might be at fault)</td>
      </tr>
      <tr>
        <td class="tg-0pky">1402</td>
        <td class="tg-0pky">face_video_lighting_issue</td>
        <td class="tg-0pky">applicant performed their id verification under poor lighting conditions</td>
      </tr>
      <tr>
        <td class="tg-0pky">1410</td>
        <td class="tg-0pky">face_not_captured</td>
        <td class="tg-0pky">applicant has not presented a face</td>
      </tr>
      <tr>
        <td class="tg-0pky">1411</td>
        <td class="tg-0pky">face_partially_hidden</td>
        <td class="tg-0pky">applicant did not show the full front view of their face</td>
      </tr>
      <tr>
        <td class="tg-0pky">1412</td>
        <td class="tg-0pky">face_not_turned</td>
        <td class="tg-0pky">applicant did not move to prove the liveness</td>
      </tr>
      <tr>
        <td class="tg-0pky">1413</td>
        <td class="tg-0pky">face_instructions_not_followed</td>
        <td class="tg-0pky">applicant did not follow the instructions when submitting their face</td>
      </tr>
      <tr>
        <td class="tg-fymr" colspan="3"><span style="font-weight:bold">Internal error</span></td>
      </tr>
      <tr>
        <td class="tg-0pky">1901</td>
        <td class="tg-0pky">internal_error</td>
        <td class="tg-0pky">an internal error prevents us from completing the verification, we do our best to reduce the occurrence of this case</td>
      </tr>
    </tbody>
    </table>

    ### Status: `declined`
    <table class="tg">
    <colgroup>
      <col class="one" />
      <col class="two" />
      <col class="three" />
    </colgroup>
    <thead>
      <tr>
        <th class="tg-fymr"><nobr><code>code</code></nobr></th>
        <th class="tg-fymr"><code>reason</code></th>
        <th class="tg-fymr">Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td class="tg-dvid" colspan="3">Document issue</td>
      </tr>
      <tr>
        <td class="tg-0pky">2101</td>
        <td class="tg-0pky">document_expired</td>
        <td class="tg-0pky">applicant presented an expired document</td>
      </tr>
      <tr>
        <td class="tg-0pky">2102</td>
        <td class="tg-0pky">document_not_accepted</td>
        <td class="tg-0pky">applicant presented a document which is not accepted</td>
      </tr>
      <tr>
        <td class="tg-0pky">2103</td>
        <td class="tg-0pky">document_damaged</td>
        <td class="tg-0pky">applicant has submitted a damaged document</td>
      </tr>
      <tr>
        <td class="tg-0pky">2201</td>
        <td class="tg-0pky">document_photocopy</td>
        <td class="tg-0pky">applicant presented a photocopy of the document</td>
      </tr>
      <tr>
        <td class="tg-0pky">2202</td>
        <td class="tg-0pky">document_screenshot</td>
        <td class="tg-0pky">applicant presented the document on a screen</td>
      </tr>
      <tr>
        <td class="tg-dvid" colspan="3">Identity fraud</td>
      </tr>
      <tr>
        <td class="tg-0pky">2301</td>
        <td class="tg-0pky">document_counterfeit</td>
        <td class="tg-0pky">applicant has submitted a counterfeit or falsification</td>
      </tr>
      <tr>
        <td class="tg-0pky">2302</td>
        <td class="tg-0pky">document_stolen</td>
        <td class="tg-0pky">applicant presented a document declared as stolen or lost</td>
      </tr>
      <tr>
        <td class="tg-0pky">2303</td>
        <td class="tg-0pky">document_swap</td>
        <td class="tg-0pky">applicant presented the front and back of two different documents</td>
      </tr>
      <tr>
        <td class="tg-0pky">2304</td>
        <td class="tg-0pky">face_mismatch</td>
        <td class="tg-0pky">applicant does not match the photograph of the document</td>
      </tr>
      <tr>
        <td class="tg-0pky">2305</td>
        <td class="tg-0pky">face_not_live</td>
        <td class="tg-0pky">applicant has presented someone else's face on a screen or on a physical medium</td>
      </tr>
      <tr>
        <td class="tg-0pky">2306</td>
        <td class="tg-0pky">face_alteration</td>
        <td class="tg-0pky">applicant has altered his/her appearance</td>
      </tr>
      <tr>
        <td class="tg-0pky">2307</td>
        <td class="tg-0pky">videos_digital_alteration</td>
        <td class="tg-0pky">applicant has digitally altered the videos</td>
      </tr>
      <tr>
        <td class="tg-dvid" colspan="3">Suspicious behavior</td>
      </tr>
      <tr>
        <td class="tg-0pky">2401</td>
        <td class="tg-0pky">declared_identity_mismatch</td>
        <td class="tg-0pky">applicant’s identity does not match with the expected one</td>
      </tr>
      <tr>
        <td class="tg-0pky">2402</td>
        <td class="tg-0pky">suspicious_device</td>
        <td class="tg-0pky">applicant used a device that has been technically altered</td>
      </tr>
      <tr>
        <td class="tg-0pky">2403</td>
        <td class="tg-0pky">consent_unclear</td>
        <td class="tg-0pky">applicant seems to have performed the capture against his will</td>
      </tr>
    </tbody>
    </table>

    ## Retry management 
    When the `status` of the identity verification is `retry_required` we advise you to request a retry. You will need the `identity_verification_id`, as well as a webhook and a redirect URL.

    All information to request a retry can be found in the [endpoint section](#tag/identity-verifications/operation/retry_identity_verification).

    We strongly advise you to use the `reason_codes` to guide the `applicant` toward success. For example, if the reason codes indicate that the connection of the `applicant` is not sufficient, you should give this information to the `applicant`.

    <div style="padding: 0px 0px 14px 14px ; background-color: #fff6d9; border-color: #f8c92e; color: #666; display: flex; align-items: center;">
      <div style="margin-right: 20px; margin-top: 14px; font-size: 24px; color: #f8c92e; vertical-align: center;">⚠️</div>
      <div style="display: table-cell; vertical-align: center;">
        <p>Please note that you cannot request a retry if the <code>status</code> is <code>declined</code>. If you still want to onboard the concerned applicant, you should request a new verification and indicate the <code>applicant_id</code>. For more details see the <a href="#section/Applicants">applicant section</a>.</p>
      </div>
    </div>

    ## Detailed results

    ### Retrieve an identification

    If you need, you can get the full results by using the [retrieve an identity verification endpoint](#tag/identity-verifications/operation/retrieve_identity_verification). It will mainly include the following information:

    | Attribute    | Description                                                                                                    |
    |--------------|----------------------------------------------------------------------------------------------------------------|
    | status       | Indicates the position in the lifecycle as well as the action to be taken                                      |
    | reason_codes | Indicates the cause when the status is refused, declined or retry_required                                     |
    | identity     | Includes all information about the identity of the `applicant`                                                 |
    | document     | Includes all information that has been extracted from the document, as well as the best images of the document |
    | face         | Includes the best image of the face                                                                            |
    | pdf          | Includes all information in a pdf format                                                                       |

    Please note that the information we extract from the document can be configured with your account manager.

    ### API response signing
    If enabled in your configuration (Contact your account manager in order to activate the response signature), Ubble API responses will be signed. This signature can be used to verify that the api response has not been altered and has been issued by Ubble and not by anyone else. To also verify that assets data (images) has not been altered and comes from Ubble, the assets hash has been added to the response body, and after verification of the signature, the images can be hashed and compared to the hashes in the verified response. Ubble uses an asymetric key signing algorithm of type ECDSA with a sha2-512 hashing algorithm. Assets are hashed using the sha2-256 hashing algorithm.

    #### Signing key policy
    A signing key will be created for each configuration and for each environment (Live and Test). The public key (used for signature verification) associated with the private key that is managed by ubble can be downloaded from the client dashboard. The private key has a validity of 1 year and will be automatically renewed. Upon renewal the public key will also change and has to be re-downloaded from the dashboard. You can detect a key rotation by looking at the signature version in the api response, to verify that response you will need to use the public key with the same version. All versions of the public key can be downloaded from the dashboard so you don't have to worry about losing older versions.

    #### Verifying Response signature

    The `Ubble-Signature` header contains the timestamp of the request (`1635236316.377888`), the signing key identifier and version (`3456-live-v1`) as well as the signature itself (`5257a869a7ecebeda35affa62cdcb3fa51cad7e77a0e56ff546d0ae8e108d8bd`).

    format:
    ```
      <timestamp>:<configuration id>-<test or live identification>-<key version>:<signature>
    ```

    example:
    ```
      1635236316.377888:3456-live-v1:5257a869a7ecebeda35affa62cdcb3fa51cad7e77a0e56ff546d0ae8e108d8bd
    ```

    The signature can be verified on your side by verifying the signature against the received body using the `public key` corresponding to the signature key. You will need the Public key corresponding to the signature version, that you can find on your dashboard configuration page. There is one for test identifications and one for live identifications.

    See the example in python if you need help.

    #### Verifying Assets
    To verify that the assets that correspond to the received response are correct, the received images have to be hashed using a specific algorithm, this hash must be the same as the hash that was sent with the signed response.

    Be aware that all two verification stages must be valid (api response signature and assets hash) for the data to be valid.

    ## Data management
    You can configure data retention together with your account manager, in accordance with your purpose for using the data. At the end of this time, the identity verifications are anonymized, which means all personal or sensitive data are deleted. The default storage time is 90 days. 

    If needed, you can also request the anonymization of an identity verification through the [anonymization endpoint](#tag/identity-verifications/operation/anonymize_identity_verification). 

    # Applicants

    ## Creation
    When you create an identity verification, an applicant is automatically created and the call returns an `applicant_id`.

    You can also directly create an applicant using the [create endpoint](#tag/applicants/operation/create_applicant). In this case you will be able to define the `external_applicant_id`, that should correspond to unique identifier of the applicant in your database, as well as the `mail` of the applicant.

    If the applicant is already created, you can also patch this information using the [update endpoint](#tag/applicants/operation/update_applicant).

    ## Applicant file 
    You can request several verifications for the same applicant. You only need to indicate the concerned `applicant_id` when creating the verification.

    If and only if an identity verification is `approved`, the verified identity is added to the `applicant` file and you can find this information using the [retrieve an applicant endpoint](#tag/applicants/operation/retrieve_applicant).

    # Webhooks

    ## Configuration
    You need to provide the webhook you want to be notified on when creating an identity verification. You will be notified of each event on identity verifications. For more details see the [event section](#section/Identity-verification-results/Events).

    To help you integrate your webhook you can trigger it with the standard answers, see [notify endpoint](#tag/identity-verifications/operation/notify_identity_verification).

    ## Retry
    We expect that you return us a 200 or 201 status code within 10 seconds before we retry, up to 2 retries will be performed. If needed, webhook notifications can be resend manually using the [notify endpoint](#tag/identity-verifications/operation/notify_identity_verification).

    ## Body 
    The webhook body contains the following information: 

    | Attribute                | Description                                   |
    |--------------------------|-----------------------------------------------|
    | applicant_id             | id of the applicant, useful to recognize them |
    | user_journey_id          | id of the user journey                        |
    | identity_verification_id | id of the identity verification               |
    | status                   | status of the identity verification           |
    | reason_codes             | list of reason codes                          |

    ### Example
    ```json
      {
          "specversion": "2.0",
          "type": "ai.ubble.identity-verification.capture_completion.v2",
          "subject": "idv_5hxpdwegjcbujpth3wdo55d3vm",
          "id": "evt_5hxpdwegjcbujpth3wdo55d3vm",
          "time": "2023-03-22T17:31:00Z",
          "datacontenttype": "application/json",
          "data": {
              "applicant_id": "apl_5hxpdwegjcbujpth3wdo55d3vm",
              "user_journey_id": "usj_5hxpdwegjcbujpth3wdo55d3vm",
              "identity_verification_id": "idv_5hxpdwegjcbujpth3wdo55d3vm",
              "status": "declined",
              "reason_codes": [
                  {"code": 1310, "reason": "manipulation_face_blurry"},
                  {"code": 2102, "reason": "document_not_accepted"}
              ]
          }
      }
    ```

    ## Signature
    For security reasons all our webhook calls are signed.

    `Ubble-Signature` header contains the timestamp of the signature plus the signature itself. This allow you to ensure the content of the webhook was not modified.

    The timestamp is prefixed by `ts=`, and the signature is prefixed by `v1=`. Example: `ts=1492774577,v1=5257a869e7ecebeda32affa62cdca3fa51cad7e77a0e56ff536d0ce8e108d8bd`

    To compare the signature, you will need the `webhook secret`, that you can find on your dashboard configuration page. There is one for secret for test identifications and one for live identifications.

    See the example in python if you need help.

    ## Security
    ### Webhook ip whitelisting
    For security purposes, if you need to whitelist our incoming api calls, see our [public ip](https://docs.outscale.com/en/userguide/OUTSCALE-Public-IPs.html).

    ### Webhooks Authentication
    You can also choose to authentify our webhook calls against OAuth2. Please contact your account manager in order set up the authentication. You will need to provide an URL Token, a `CLIENT_ID`, a `CLIENT_SECRET` and optionally a refresh token URL.

    # API standards

    ## Required tag
    ### required
    Attributes tagged as `required` **MUST** be present in requests and reponses.

    ### null values
    Attributes not marked as `required` can be null. In that case the attribute is not sent in the response.

    ## Ressources identifiers
    ### Format
    `{prefix}_{lower-case base-32 encoded GUID}`

    ### Ressources identifiers are formatted as follows

    | ressource name         | prefix | example                         |
    |------------------------|--------|---------------------------------|
    | applicants             | apl    | apl_tkoi5db4hryu5cei5vwoabr7we  |
    | identity-verifications | idv    | idv_tkoi5db4hryu5cei5vwoabr7we  |
    | user-journey           | usj    | usj_tkoi5db4hryu5cei5vwoabr7we  |

    ## Content type
    The API accepts and returns `application/json` type.

    ## Error handling
    Errors 4xx and 5xx are formatted as follows:
    - `error_type`: a short descirption code
    - `error_codes`: a list of more detailed codes

    Error codes and error types can be formatted as follows:
    - `{target/attribute}__{error}`
    - `{nested_object}__{object_attribute}__{error}`

    ```json
    {
      "error_type": "invalid_request",
      "error_codes": [
        "birth_date__invalid_format",
        "first_name__required",
        "phone_number__country_code__invalid"
      ]
    }
    ````

    ## Common Objects/Properties

    | name         | format                                                                                                                                              | example                                                                     |
    |--------------|-----------------------------------------------------------------------------------------------------------------------------------------------------|-----------------------------------------------------------------------------|
    | countries    | - apply ISO 3166-1 alpha-2                                                                                                                          | FR                                                                          |
    | date-time    | - apply ISO8601<br /> - always UTC time                                                                                                             | 2017-07-21T17:32:28Z                                                        |
    | phone number | - country code with or without the '+' sign (+33 or 33 or 0033 should be valid) <br /> - number with potential spaces, hyphens or trailing zero(s)  | {<br />    "country_code": "+44",<br />    "number": "1234 567890"<br /> }  |

  version: 2.0.0

servers:
  - url: https://api.staging.env.ubble.ai/v2/

tags:
  - name: identity verifications
    description: Identity verification endpoints documentation.
  - name: applicants
    description: Applicant management endpoints documentation.

x-tagGroups:
  - name: Endpoints documentation
    tags:
      - identity verifications
      - applicants

paths:
  /identity-verifications:
    post:
      tags:
        - identity verifications
      summary: Create an identity verification
      description: Create an identity verification.
      operationId: create_identity_verification
      requestBody:
        required: true
        content:
          application/json:
            examples:
              Only required data:
                $ref: "#/components/examples/identity_verification_creation_request_body_min"
              All possible data:
                $ref: "#/components/examples/identity_verification_creation_request_body_max"
              Use an existing applicant:
                $ref: "#/components/examples/identity_verification_creation_request_body_min_plus_apl"
            schema:
              $ref: "#/components/schemas/IdentityVerification"
      responses:
        "201":
          description: Identity verification created
          content:
            application/json:
              examples:
                identity_verification_creation_response_body:
                  $ref: "#/components/examples/identity_verification_response_body"
              schema:
                required: [applicant_id, user_journey_id, phone_number]
                allOf:
                  - $ref: "#/components/schemas/IdentityVerification"
      callbacks:
        statusChanged:
          "WIP - {$request.body#/webhook_url}":
            post:
              requestBody:
                required: true
                content:
                  application/json:
                    example:
                      {
                        "specversion": "2.0",
                        "type": "ai.ubble.identity-verification.capture_completion.v2",
                        "subject": "idv_5hxpdwegjcbujpth3wdo55d3vm",
                        "id": "evt_5hxpdwegjcbujpth3wdo55d3vm",
                        "time": "2023-03-22T17:31:00Z",
                        "datacontenttype": "application/json",
                        "data":
                          {
                            "applicant_id": "apl_5hxpdwegjcbujpth3wdo55d3vm",
                            "user_journey_id": "usj_5hxpdwegjcbujpth3wdo55d3vm",
                            "identity_verification_id": "idv_5hxpdwegjcbujpth3wdo55d3vm",
                            "status": "declined",
                            "reason_codes":
                              [
                                {
                                  "code": 1310,
                                  "reason": "manipulation_face_blurry",
                                },
                                {
                                  "code": 2102,
                                  "reason": "document_not_accepted",
                                },
                              ],
                          },
                      }
                    schema:
                      $ref: "#/components/schemas/WipEvent"
              responses:
                "200":
                  description: Your server returns this code if it accepts the callback.
                "201":
                  description: Your server returns this code if it accepts the callback.

  /identity-verifications/{identity_verification_id}/retry:
    post:
      tags:
        - identity verifications
      summary: Retry an identity verification
      description: |
        This endpoint allows you to retry an identification verification with the `retry_required` status.

        If the verification status is not `retry_required`, this endpoint will return an error.

        You will need to provide the ID of the failed verification in the URL.

        The on success, the enpoint returns a `200` and the IdentityVerification ressource containing the new `_links/verification_url`

      operationId: retry_identity_verification
      requestBody:
        content:
          application/json:
            examples:
              Empty body accepted:
                $ref: "#/components/examples/identity_verification_retry_request_body_min"
              All possible data:
                $ref: "#/components/examples/identity_verification_retry_request_body_max"
            schema:
              $ref: "#/components/schemas/IdentityVerificationRetryRequest"

      responses:
        "200":
          description: The verification has been retried successfully
          content:
            application/json:
              examples:
                identity_verification_creation_response_body:
                  $ref: "#/components/examples/identity_verification_response_body"
              schema:
                required: [applicant_id, user_journey_id, phone_number]
                allOf:
                  - $ref: "#/components/schemas/IdentityVerification"
        "400":
          description: The provided ID is not valid
        "404":
          description: The provided ID does not correspond to a failed verification
        "409":
          description: The verification has already succeeded
        "500":
          description: An error occurred while retrying the verification

  /identity-verifications/{identity_verification_id}:
    get:
      tags:
        - identity verifications
      summary: Retrieve an identity verification
      description: Retrieve an identity verification
      operationId: retrieve_identity_verification
      parameters:
        - name: identity_verification_id
          required: true
          in: path
          description: ID of the identity verification
          schema:
            $ref: "#/components/schemas/IdentityVerificationId"
      responses:
        "200":
          description: Identity verification retrieved
          content:
            application/json:
              examples:
                identity_verification_creation_response_body:
                  $ref: "#/components/examples/identity_verification_response_body"
              schema:
                required: [applicant_id, user_journey_id, phone_number]
                allOf:
                  - $ref: "#/components/schemas/IdentityVerification"

  /identity-verifications/{identity_verification_id}/anonymize:
    post:
      tags:
        - identity verifications
      summary: Anonymize an identity verification
      description: Anonymize the personal data of an identity verification with the specified ID.
      operationId: anonymize_identity_verification
      parameters:
        - name: identity_verification_id
          in: path
          description: ID of the identity verification to anonymize
          required: true
          schema:
            type: integer
      responses:
        "202":
          description: Identity verification anonymization requested
          content:
            application/json:
              example:
                id: idv_tkoi5db4hryu5cei5vwoabr7we
                _links:
                  self:
                    href: https://api.ubble.ai/v2/applicants/apl_tkoi5db4hryu5cei5vwoabr7we
              schema:
                type: object
                required: [id, _links]
                properties:
                  id:
                    $ref: "#/components/schemas/IdentityVerificationId"
                  _links:
                    $ref: "#/components/schemas/SelfLink"
        "404":
          description: Identity verification not found
        "400":
          description: Bad request. The identity verification cannot be anonymized.
        "500":
          description: Internal server error

  /identity-verifications/{identity_verification_id}/notify:
    post:
      tags:
        - identity verifications
      summary: Request webhook notification
      operationId: notify_identity_verification
      description: |
        - It can be used for identity verification regardless of their statuses.
        - It initiates a webhook call containing the latest event associated with the identity verification.
      parameters:
        - name: identity_verification_id
          in: path
          description: ID of the identity verification to notify
          required: true
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                webhook_url:
                  type: string
                  format: uri
      responses:
        "204":
          description: Notification succesfully requested

  /applicants:
    post:
      tags:
        - applicants
      summary: Create an Applicant
      description: Create an Applicant
      operationId: create_applicant
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Applicant"
            examples:
              All possible data:
                $ref: "#/components/examples/applicant_creation_request_body"

      responses:
        "201":
          description: Applicant successfully created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Applicant"
              examples:
                Always replies:
                  $ref: "#/components/examples/applicant_response_body"
          links:
            RetrieveApplicantById:
              operationId: retrieve_applicant
              parameters:
                applicant_id: "$response.body#/id"
        "400":
          description: Bad request
          content:
            application/json:
              examples:
                Invalid phone number:
                  value:
                    {
                      "error_type": "request_invalid",
                      "error_codes": ["phone_number__invalid_format"],
                    }

  /applicants/{applicant_id}:
    get:
      tags:
        - applicants
      summary: Retrieve an Applicant
      description: Retrieve an Applicant
      operationId: retrieve_applicant
      parameters:
        - name: applicant_id
          required: true
          in: path
          description: ID of Applicant to return
          schema:
            $ref: "#/components/schemas/ApplicantId"
      responses:
        "200":
          description: applicant retrieved succesfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Applicant"
              examples:
                Always replies:
                  $ref: "#/components/examples/applicant_response_body"
        "404":
          description: "Applicant not found"

    patch:
      tags:
        - applicants
      summary: Update an Applicant
      description: Update an Applicant
      operationId: update_applicant
      parameters:
        - name: applicant_id
          required: true
          in: path
          description: ID of Applicant to return
          schema:
            $ref: "#/components/schemas/ApplicantId"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Applicant"
            examples:
              All possible data:
                $ref: "#/components/examples/applicant_creation_request_body"
      responses:
        "200":
          description: applicant updated succesfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Applicant"
              examples:
                Always replies:
                  $ref: "#/components/examples/applicant_response_body"
        "404":
          description: Applicant not found
        "400":
          description: Bad request. One or more input parameters are invalid
        "500":
          description: Internal server error

components:
  examples:
    identity_verification_creation_request_body_min:
      value:
        declared_data:
          first_name: David
          last_name: Vincent
        webhook_url: https://my.api/events/
        redirect_url: https://myweb.site?query-param=hello

    identity_verification_creation_request_body_min_plus_apl:
      value:
        applicant_id: apl_tkoi5db4hryu5cei5vwoabr7we
        declared_data:
          first_name: David
          last_name: Vincent
        webhook_url: https://my.api/events/
        redirect_url: https://myweb.site?query-param=hello

    identity_verification_creation_request_body_max:
      value:
        user_journey_id: usj_tkoi5db4hryu5cei5vwoabr7we
        applicant_id: apl_tkoi5db4hryu5cei5vwoabr7we
        declared_data:
          first_name: David
          last_name: Vincent
          birth_date: 1934-10-02
        phone_number:
          country_code: "+1"
          number: "2068133616"
        webhook_url: https://my.api/events/
        redirect_url: https://myweb.site?query-param=hello

    identity_verification_retry_request_body_min:
      value: {}

    identity_verification_retry_request_body_max:
      value:
        phone_number:
          country_code: "+1"
          number: "2068133616"
        webhook_url: https://my.api/events/
        redirect_url: https://myweb.site?query-param=hello

    identity_verification_response_body:
      value:
        id: idv_tkoi5db4hryu5cei5vwoabr7we
        created_on: 2017-07-21T17:32:28Z
        modified_on: 2017-07-21T17:40:32Z
        user_journey_id: usj_tkoi5db4hryu5cei5vwoabr7we
        applicant_id: apl_tkoi5db4hryu5cei5vwoabr7we
        status: declined
        reason_codes:
          - { "code": 1310, "reason": "manipulation_face_blurry" }
          - { "code": 2102, "reason": "document_not_accepted" }
        verified_identity:
          first_names: David
          last_name: Vincent
          birth_date: 1934-10-02
        declared_data:
          first_name: David
          last_name: Vincent
          birth_date: 1934-10-02
        documents:
          - document_type: ID
            first_names: David
            last_name: Vincent
            front_image_signed_url: https://storage-b.staging.env.ubble.ai/staging-env-ubble-ai/NDYOOVHGZPAQ/a54b3393-f02a-47c9-a9c5-2f6ee73560e1/bb603e2f-5de9-40f2-9631-8285a33c24c0/tight_crops/FRA-I5-Front-bb603e2f-5de9-40f2-9631-8285a33c24c0-1679921906596.png?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=V9jgOdpOdeVSFTkA4ZsG%2F20230327%2Feu-west-2%2Fs3%2Faws4_request&X-Amz-Date=20230327T163228Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=87d8467ab92cbad7c00171af28e613d495f3ff441ce0ea59dd013d68abc50555
        face:
          image_signed_url: https://storage-b.staging.env.ubble.ai/staging-env-ubble-ai/NDYOOVHGZPAQ/a54b3393-f02a-47c9-a9c5-2f6ee73560e1/bb603e2f-5de9-40f2-9631-8285a33c24c0/live_face/bb603e2f-5de9-40f2-9631-8285a33c24c0-1679921946714.png?response-content-type=image%2Fpng&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=V9jgOdpOdeVSFTkA4ZsG%2F20230327%2Feu-west-2%2Fs3%2Faws4_request&X-Amz-Date=20230327T163223Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=2b7d87fec4f11f0df949da7beade2519cf1a51ce70fe9cc1cf0470d73f5340e4
        pdf:
          signed_url: https://storage-b.staging.env.ubble.ai/staging-env-ubble-ai/NDYOOVHGZPAQ/a54b3393-f02a-47c9-a9c5-2f6ee73560e1/bb603e2f-5de9-40f2-9631-8285a33c24c0/live_face/bb603e2f-5de9-40f2-9631-8285a33c24c0-1679921946714.png?response-content-type=image%2Fpng&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=V9jgOdpOdeVSFTkA4ZsG%2F20230327%2Feu-west-2%2Fs3%2Faws4_request&X-Amz-Date=20230327T163223Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=2b7d87fec4f11f0df949da7beade2519cf1a51ce70fe9cc1cf0470d73f5340e4
        phone_number:
          country_code: "+1"
          number: "2068133616"
        webhook_url: https://my.api/events/
        redirect_url: https://myweb.site?query-param=hello
        _links:
          self:
            href: "https://api.ubble.ai/v2/identity-verifications/idv_tkoi5db4hryu5cei5vwoabr7we"
          applicant:
            href: "https://api.ubble.ai/v2/applicants/apl_tkoi5db4hryu5cei5vwoabr7we"
          verification_url:
            href: "https://id.ubble.ai/4hryu5cei5/"

    applicant_creation_request_body:
      value:
        external_applicant_id: ext_osdfdfdb4hryu5cei5vwoabrk5k
        email: david.vincent@courriel.ml

    applicant_response_body:
      value:
        id: apl_tkoi5db4hryu5cei5vwoabr7we
        created_on: 2017-07-21T17:32:28Z
        modified_on: 2017-07-21T17:40:32Z
        external_applicant_id: ext_osdfdfdb4hryu5cei5vwoabrk5k
        email: david.vincent@courriel.ml
        _links:
          self:
            href: https://api.ubble.ai/v2/applicants/apl_tkoi5db4hryu5cei5vwoabr7we

    address_example_american:
      value:
        address_line1: 4022 Laguna St
        address_line2: Flat 456
        city: Santa Barbara
        zip: 93101
        country: US

  schemas:
    IdentityVerification:
      type: object
      required: [id]
      properties:
        id:
          $ref: "#/components/schemas/IdentityVerificationId"
      allOf:
        - $ref: "#/components/schemas/DatedObject"
        - $ref: "#/components/schemas/IdentityVerificationBase"

    IdentityVerificationBase:
      type: object
      required:
        [declared_data, status, reason_codes, webhook_url, redirect_url, _links]
      properties:
        user_journey_id:
          readOnly: false
          allOf:
            - $ref: "#/components/schemas/UserJourneyId"
        applicant_id:
          readOnly: false
          allOf:
            - $ref: "#/components/schemas/ApplicantId"
        status:
          $ref: "#/components/schemas/VerificationStatuses"
        reason_codes:
          type: array
          readOnly: true
          minItems: 0
          items:
            $ref: "#/components/schemas/ReasonCode"
        verified_identity:
          $ref: "#/components/schemas/Identity"
        declared_data:
          $ref: "#/components/schemas/DeclaredData"
        documents:
          type: array
          readOnly: true
          minItems: 0
          maxItems: 2
          items:
            $ref: "#/components/schemas/Document"
        face:
          $ref: "#/components/schemas/Face"
        pdf:
          $ref: "#/components/schemas/Pdf"
        phone_number:
          $ref: "#/components/schemas/PhoneNumber"
        webhook_url:
          type: string
          format: uri
        redirect_url:
          type: string
          format: uri
        _links:
          $ref: "#/components/schemas/IdentityVerificationLinks"

    IdentityVerificationLinks:
      type: object
      allOf:
        - $ref: "#/components/schemas/SelfLink"
        - $ref: "#/components/schemas/ApplicantLink"
        - $ref: "#/components/schemas/ActiveLink"

    DeclaredData:
      type: object
      required: [first_name, last_name]
      properties:
        first_name:
          type: string
          maxLength: 100
        last_name:
          type: string
          maxLength: 100
        birth_date:
          type: string
          format: date

    Document:
      type: object
      required: [document_type, first_names, last_name, front_image_signed_url]
      readOnly: true
      properties:
        birth_date:
          type: string
          format: date
        birth_place:
          type: string
          maxLength: 255
        car_driving_license_expiry_date:
          type: string
          format: date
        document_number:
          type: string
          maxLength: 255
        document_type:
          $ref: "#/components/schemas/DocumentTypes"
        document_type_detailed:
          type: string
          maxLength: 255
        expiry_date:
          type: string
          format: date
        first_names:
          type: string
          maxLength: 255
        last_name:
          type: string
          maxLength: 255
        married_name:
          type: string
          maxLength: 255
        gender:
          $ref: "#/components/schemas/Gender"
        issue_date:
          type: string
          format: date
        issue_place:
          type: string
          maxLength: 255
        issuing_state_code:
          $ref: "#/components/schemas/CountryCode"
        mrz:
          type: string
          pattern: ^([A-Z0-9<]{2}[A-Z0-9<]{1,38}[\n\r])+([A-Z0-9<]{2}[A-Z0-9<]{1,44}[\n\r])?([A-Z0-9<]{2}[A-Z0-9<]{1,44}[\n\r])?$
        nationality:
          $ref: "#/components/schemas/CountryCode"
        obtaining_date:
          type: string
          format: date
        personal_number:
          type: string
          maxLength: 255
        remarks:
          type: string
          maxLength: 255
        residence_address:
          $ref: "#/components/schemas/Address"
        tax_identification_number:
          type: string
          maxLength: 255
        front_image_signed_url:
          $ref: "#/components/schemas/PreSignedUrl"
        back_image_signed_url:
          $ref: "#/components/schemas/PreSignedUrl"

    Identity:
      type: object
      required: [first_names, last_name, birth_date]
      readOnly: true
      properties:
        first_names:
          type: string
          maxLength: 255
          readOnly: true
        last_name:
          type: string
          maxLength: 255
          readOnly: true
        married_name:
          type: string
          maxLength: 255
          readOnly: true
        birth_date:
          type: string
          format: date
          readOnly: true
        birth_place:
          $ref: "#/components/schemas/CountryCode"
        nationality:
          $ref: "#/components/schemas/CountryCode"
        gender:
          $ref: "#/components/schemas/Gender"

    Face:
      type: object
      required: [image_signed_url]
      readOnly: true
      properties:
        image_signed_url:
          $ref: "#/components/schemas/PreSignedUrl"

    Pdf:
      type: object
      required: [signed_url]
      readOnly: true
      properties:
        signed_url:
          $ref: "#/components/schemas/PreSignedUrl"

    IdentityVerificationRetryRequest:
      type: object
      required: [webhook_url, redirect_url]
      properties:
        phone_number:
          $ref: "#/components/schemas/PhoneNumber"
        webhook_url:
          type: string
          format: uri
        redirect_url:
          type: string
          format: uri

    WipEvent:
      type: object
      required: [specversion, type, subject, id, time, datacontenttype, data]
      properties:
        specversion:
          type: string
          description: The version of the CloudEvents specification.
          example: "2.0"
        type:
          type: string
          description: The type of the CloudEvent.
          example: "ai.ubble.identity-verification.capture_completion.v2"
        subject:
          type: string
          description: The identifier of the subject of the event.
          example: "idv_5hxpdwegjcbujpth3wdo55d3vm"
        id:
          type: string
          description: The identifier of the event.
          example: "evt_5hxpdwegjcbujpth3wdo55d3vm"
        time:
          type: string
          format: date-time
          description: The time when the event occurred.
          example: "2023-03-22T17:31:00Z"
        datacontenttype:
          type: string
          description: The content type of the data attribute.
          example: "application/json"
        data:
          type: object
          description: The event payload.
          example:
            {
              "applicant_id": "apl_5hxpdwegjcbujpth3wdo55d3vm",
              "user_journey_id": "usj_5hxpdwegjcbujpth3wdo55d3vm",
              "identity_verification_id": "idv_5hxpdwegjcbujpth3wdo55d3vm",
              "status": "declined",
              "reason_codes":
                [
                  { "code": 1310, "reason": "manipulation_face_blurry" },
                  { "code": 2102, "reason": "document_not_accepted" },
                ],
            }
    ApplicantLink:
      type: object
      required: [applicant]
      properties:
        applicant:
          $ref: "#/components/schemas/HalLink"

    ActiveLink:
      type: object
      required: [verification_url]
      properties:
        verification_url:
          $ref: "#/components/schemas/HalLink"

    ApplicantRelation:
      type: object
      properties:
        id:
          readOnly: false
          allOf:
            - $ref: "#/components/schemas/ApplicantId"

    Applicant:
      required: [id]
      allOf:
        - type: object
          properties:
            id:
              $ref: "#/components/schemas/ApplicantId"
        - $ref: "#/components/schemas/DatedObject"
        - $ref: "#/components/schemas/BaseApplicant"
        - $ref: "#/components/schemas/ApplicantsLinks"

    BaseApplicant:
      type: object
      properties:
        external_applicant_id:
          type: string
          example: "ext_osdfdfdb4hryu5cei5vwoabrk5k"
        email:
          type: string
          format: email
          example: david.vincent@courriel.ml
        verified_identity:
          $ref: "#/components/schemas/Identity"

    ApplicantsLinks:
      type: object
      required: [_links]
      properties:
        _links:
          $ref: "#/components/schemas/SelfLink"

    Attempt:
      type: object
      properties:
        state:
          $ref: "#/components/schemas/AttemptStates"
        link:
          type: string
          format: uri
          example: https://id.ubble.ai/4hryu5cei5/

    DocumentTypes:
      type: string
      description: Type of document.
      enum:
        - driving license
        - ID
        - passport
        - residence permit

    VerificationStatuses:
      type: string
      description: Status of the identity verification.
      readOnly: true
      enum:
        - pending
        - capture_in_progress
        - checks_in_progress
        - approved
        - declined
        - new_capture_required
        - refused

    AttemptStates:
      type: string
      description: States of an attempt.
      enum:
        - pending_redirection
        - capture_in_progress
        - checks_in_progress
        - completed
        - expired
        - capture_aborted
        - capture_refused
        - checks_aborted

    ReasonCode:
      type: object
      description: The code indicating why a verification could not be approved.
      readOnly: true
      properties:
        code:
          $ref: "#/components/schemas/Code"
        reason:
          $ref: "#/components/schemas/Reason"

    Reason:
      type: string
      description: A descriptive code of the reason code.
      readOnly: true

    Code:
      type: integer
      description: The numeric code of the reason code.
      readOnly: true
      minimum: 1000
      maximum: 2999

    ApplicantId:
      type: string
      description: Applicant unique identifier.
      pattern: ^apl_\w+$
      example: apl_tkoi5db4hryu5cei5vwoabr7we
      readOnly: true

    OrganizationId:
      type: string
      description: Organization unique identifier.
      pattern: ^org_\w+$
      example: org_tkoi5db4hryu5cei5vwoabr7we
      readOnly: true

    IdentityVerificationId:
      type: string
      description: Identity verification unique identifier.
      pattern: ^idv_\w+$
      example: idv_tkoi5db4hryu5cei5vwoabr7we
      readOnly: true

    UserJourneyId:
      type: string
      description: User journey unique identifier.
      pattern: ^usj_\w+$
      example: usj_tkoi5db4hryu5cei5vwoabr7we
      readOnly: true

    Address:
      type: object
      description: Postal address.
      required: [address_line1, city, zip, country]
      properties:
        address_line1:
          type: string
          minLength: 1
          maxLength: 100
          example: 4022 Laguna St
        address_line2:
          type: string
          minLength: 1
          maxLength: 100
          example: Flat 456
        city:
          type: string
          minLength: 1
          maxLength: 100
          example: Santa Barbara
        zip:
          type: string
          minLength: 2
          maxLength: 20
          example: 93101
        country:
          $ref: "#/components/schemas/CountryCode"

    CountryCode:
      type: string
      format: ISO 3166-1 alpha-2
      pattern: ^[A-Za-z]{2}$
      example: US

    Gender:
      type: string
      description: Person gender.
      example: M
      enum:
        - M
        - F

    PhoneNumber:
      type: object
      required: [country_code, number]
      properties:
        country_code:
          $ref: "#/components/schemas/PhonePrefix"
        number:
          $ref: "#/components/schemas/DomesticPhoneNumber"

    PhonePrefix:
      type: string
      format: international phone prefix
      pattern: ^((\+)|(00))?(\d+)$
      example: "+33"

    DomesticPhoneNumber:
      type: string
      format: domestic phone number
      pattern: ^\d{1,14}$
      example: "2068133616"

    SelfLink:
      type: object
      required: [self]
      readOnly: true
      properties:
        self:
          $ref: "#/components/schemas/HalLink"

    HalLink:
      type: object
      required: [href]
      properties:
        href:
          type: string
          format: uri

    PreSignedUrl:
      type: string
      format: uri
      description: Pre-signed URL
      example: https://storage-b.staging.env.ubble.ai/staging-env-ubble-ai/NDYOOVHGZPAQ/a54b3393-f02a-47c9-a9c5-2f6ee73560e1/bb603e2f-5de9-40f2-9631-8285a33c24c0/live_face/bb603e2f-5de9-40f2-9631-8285a33c24c0-1679921946714.png?response-content-type=image%2Fpng&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=V9jgOdpOdeVSFTkA4ZsG%2F20230327%2Feu-west-2%2Fs3%2Faws4_request&X-Amz-Date=20230327T163223Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=2b7d87fec4f11f0df949da7beade2519cf1a51ce70fe9cc1cf0470d73f5340e4

    DatedObject:
      type: object
      required: [created_on, modified_on]
      properties:
        created_on:
          description: UTC Date time when the ressource was created
          type: string
          format: date-time
          example: 2017-07-21T17:32:28Z
          readOnly: true
        modified_on:
          description: UTC Date time when the ressource was modified
          type: string
          format: date-time
          example: 2017-07-21T17:40:32Z
          readOnly: true
